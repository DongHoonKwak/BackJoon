#include <iostream>
#include <algorithm>
using namespace std;

pair <int, pair<int, int> > map[100003];

int m, n;
int level[1001];
int parent[1001];
int ans;

void make_set()
{
	for (int i = 0; i < 1001; i++)
		parent[i] = i;
}

int find_set(int x) 
{
	if (x != parent[x])
		parent[x] = find_set(parent[x]);
	return parent[x];
}

void union_set(int x, int y) 
{
	x = find_set(x);
	y = find_set(y);
	
	if (level[x] > level[y]) 
		parent[y] = x;
	else
	{
		parent[x] = y;
		if (level[x] == level[y])
			level[y]++;
	}
}

int main() 
{
	int a, b, c;

	scanf("%d %d", &n, &m); // ������ ���� , ������ ����
	make_set(); //�⺻ ��� ����

	for (int i = 0; i < m; i++) // ������ ������ŭ �ݺ�
	{
		scanf("%d %d %d", &a, &b, &c); // ���� �� ����ġ
		map[i].first = c; // i��° ����ġ
		map[i].second.first = a; // ����
		map[i].second.second = b; // ��
	}

	sort(map, map + m); //����ġ ������ ����

	for (int i = 0; i < m; i++)
	{
		a = map[i].second.first; //������ a�� ����
		b = map[i].second.second; // ���� b�� ����
		c = map[i].first; // ����ġ�� c�� ����

		if ((find_set(a)) != (find_set(b)))  //���۰� ���� ���� �θ� �ٸ��ٸ�
		{
			ans += c; //�信 ����ġ�� ���ϰ�
			union_set(a, b); //��ģ��
		}
	}

	printf("%d\n", ans); //���� ����Ѵ�.
}
